"use client";
import React, { useEffect, useState } from "react";
import {
  Button,
  Form,
  Input,
  message,
  Select,
  Checkbox,
  Tabs,
  DatePicker,
} from "antd";
import axios from "axios";
import { useRouter } from "next/navigation";
import dayjs from "dayjs";

const { TextArea } = Input;

// üìå meta_data_id mapping (–∞–¥–∏–ª—Ö–∞–Ω)
const FIELD_META_MAP = {
  description: 24451,
  sector: 7092151,
  subSector: 7092152,
  methodology: 7092153,
  calculation: 7092154,
  startDate: 7092155,
  frequency: 9651,
  unit: 7092156,
  lastModified: 7092158,
  source: 8404,
  language: 3084801,
  expert: 7092157,
  downloadLink: 7092159,
};

export default function MetadataNew() {
  const [form] = Form.useForm();
  const router = useRouter();

  const [catalogues, setCatalogues] = useState([]);
  const [sectors, setSectors] = useState([]);
  const [frequencies, setFrequencies] = useState([]);

  // üìå —Å–æ–Ω–≥–æ–ª—Ç—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç—É—É–¥—ã–≥ —Å–µ—Ä–≤–µ—Ä—ç—ç—Å –∞—á–∞–∞–ª–∞—Ö
  useEffect(() => {
    const loadOptions = async () => {
      try {
        const res = await axios.get("/api/metadata/admin/options"); // ”©”©—Ä–∏–π–Ω options API
        setCatalogues(res.data.catalogues || []);
        setSectors(res.data.subClassifications || []);
        setFrequencies(res.data.frequencies || []);
      } catch (e) {
        message.error("–ñ–∞–≥—Å–∞–∞–ª—Ç—É—É–¥ –∞—á–∞–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
      }
    };
    loadOptions();
  }, []);

  const onFinish = async (values) => {
    try {
      const metaValues = [
        {
          meta_data_id: FIELD_META_MAP.description,
          valuemn: values.descriptionmn,
          valueen: values.descriptionEn,
        },
        {
          meta_data_id: FIELD_META_MAP.sector,
          valuemn: values.sector?.join(","),
          valueen: values.sectorEn?.join(","),
        },
        {
          meta_data_id: FIELD_META_MAP.subSector,
          valuemn: values.subSector,
          valueen: values.subSectorEn,
        },
        {
          meta_data_id: FIELD_META_MAP.methodology,
          valuemn: values.methodology,
          valueen: values.methodologyEn,
        },
        {
          meta_data_id: FIELD_META_MAP.calculation,
          valuemn: values.calculation,
          valueen: values.calculationEn,
        },
        {
          meta_data_id: FIELD_META_MAP.startDate,
          valuemn: values.startDate
            ? values.startDate.format("YYYY-MM-DD")
            : null,
          valueen: values.startDateEn
            ? values.startDateEn.format("YYYY-MM-DD")
            : null,
        },
        {
          meta_data_id: FIELD_META_MAP.frequency,
          valuemn: values.frequency?.join(","),
          valueen: values.frequencyEn?.join(","),
        },
        {
          meta_data_id: FIELD_META_MAP.unit,
          valuemn: values.unit,
          valueen: values.unitEn,
        },
        {
          meta_data_id: FIELD_META_MAP.source,
          valuemn: values.source,
          valueen: values.sourceEn,
        },
        {
          meta_data_id: FIELD_META_MAP.language,
          valuemn: values.language?.join(","),
          valueen: values.languageEn?.join(","),
        },
        {
          meta_data_id: FIELD_META_MAP.expert,
          valuemn: values.expert,
          valueen: values.expertEn,
        },
        {
          meta_data_id: FIELD_META_MAP.lastModified,
          valuemn: values.lastModified
            ? values.lastModified.format("YYYY-MM-DD")
            : null,
          valueen: values.lastModifiedEn
            ? values.lastModifiedEn.format("YYYY-MM-DD")
            : null,
        },
        {
          meta_data_id: FIELD_META_MAP.downloadLink,
          valuemn: values.downloadLink,
          valueen: values.downloadLinkEn,
        },
      ];

      await axios.post("/api/metadata/admin", {
        ...values,
        metaValues,
        user: "admin",
      });

      message.success("–ê–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–ª—ç—ç");
      router.push("/admin/metadata");
    } catch (e) {
      message.error("–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    }
  };

  return (
    <div className="mx-auto max-w-screen-2xl p-4 md:p-6 2xl:p-8">
      <div className="mb-4 flex justify-between">
        <h2 className="text-lg font-medium">–ú–µ—Ç–∞ ”©–≥”©–≥–¥”©–ª —à–∏–Ω—ç—ç—Ä –Ω—ç–º—ç—Ö</h2>
      </div>

      <Form layout="vertical" form={form} onFinish={onFinish}>
        <Form.Item name="dataCatalogues" label="–î–∞—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥">
          <Select
            mode="multiple"
            placeholder="–°–æ–Ω–≥–æ–Ω–æ —É—É"
            allowClear
            optionFilterProp="children"
          >
            {catalogues.map((cat) => (
              <Select.Option key={cat.id} value={cat.id}>
                {cat.namemn} ({cat.nameen})
              </Select.Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item name="type" label="–¢”©—Ä”©–ª" rules={[{ required: true }]}>
          <Select placeholder="–°–æ–Ω–≥–æ–Ω–æ —É—É">
            <Select.Option value="indicator">“Æ–∑“Ø“Ø–ª—ç–ª—Ç</Select.Option>
            <Select.Option value="variable">–•—É–≤—å—Å–∞–≥—á</Select.Option>
            <Select.Option value="question">–ê—Å—É—É–ª—Ç</Select.Option>
          </Select>
        </Form.Item>

        <Form.Item name="namemn" label="–ù—ç—Ä (MN)" rules={[{ required: true }]}>
          <Input />
        </Form.Item>
        <Form.Item name="nameen" label="–ù—ç—Ä (EN)">
          <Input />
        </Form.Item>
        <Form.Item name="version" label="–•—É–≤–∏–ª–±–∞—Ä" rules={[{ required: true }]}>
          <Input />
        </Form.Item>
        <Form.Item name="previousVersion" label="”®–º–Ω”©—Ö —Ö—É–≤–∏–ª–±–∞—Ä">
          <Select placeholder="–•–∞–π–∂ —Å–æ–Ω–≥–æ–Ω–æ —É—É" showSearch />
        </Form.Item>

        <Form.Item name="active" valuePropName="checked">
          <Checkbox>–ò–¥—ç–≤—Ö—Ç—ç–π —ç—Å—ç—Ö</Checkbox>
        </Form.Item>
        <Form.Item name="isCurrent" valuePropName="checked">
          <Checkbox>–°“Ø“Ø–ª–∏–π–Ω —Ö—É–≤–∏–ª–±–∞—Ä</Checkbox>
        </Form.Item>
        <Form.Item name="isSecure" valuePropName="checked">
          <Checkbox>–ù—É—É—Ü–ª–∞–ª—Ç–∞–π —ç—Å—ç—Ö</Checkbox>
        </Form.Item>

        <Tabs>
          <Tabs.TabPane tab="–ú–æ–Ω–≥–æ–ª" key="mn">
            <Form.Item name="sector" label="–°–∞–ª–±–∞—Ä">
              <Select mode="multiple" placeholder="–°–æ–Ω–≥–æ–Ω–æ —É—É" allowClear>
                {sectors.map((s) => (
                  <Select.Option key={s.id} value={s.namemn}>
                    {s.namemn} ({s.nameen})
                  </Select.Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item name="subSector" label="–î—ç–¥ —Å–∞–ª–±–∞—Ä">
              <Input />
            </Form.Item>
            <Form.Item name="descriptionmn" label="–¢–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç">
              <TextArea rows={3} />
            </Form.Item>
            <Form.Item name="methodology" label="–ê—Ä–≥–∞—á–ª–∞–ª, –∞—Ä–≥–∞ –∑“Ø–π">
              <TextArea rows={2} />
            </Form.Item>
            <Form.Item name="calculation" label="–¢–æ–æ—Ü–æ—Ö –∞—Ä–≥–∞—á–ª–∞–ª">
              <TextArea rows={2} />
            </Form.Item>
            <Form.Item name="startDate" label="–¢–æ–æ—Ü–æ–∂ —ç—Ö—ç–ª—Å—ç–Ω —Ö—É–≥–∞—Ü–∞–∞">
              <DatePicker />
            </Form.Item>
            <Form.Item name="frequency" label="–î–∞–≤—Ç–∞–º–∂">
              <Select mode="multiple" placeholder="–°–æ–Ω–≥–æ–Ω–æ —É—É" allowClear>
                {frequencies.map((f) => (
                  <Select.Option key={f.id} value={f.namemn}>
                    {f.namemn} ({f.nameen})
                  </Select.Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item name="unit" label="–•—ç–º–∂–∏—Ö –Ω—ç–≥–∂">
              <Input />
            </Form.Item>
            <Form.Item name="source" label="–≠—Ö “Ø“Ø—Å–≤—ç—Ä">
              <TextArea rows={2} />
            </Form.Item>
            <Form.Item name="language" label="–•—ç–ª">
              <Select mode="tags" placeholder="MGL, ENG –≥—ç—Ö –º—ç—Ç" />
            </Form.Item>
            <Form.Item name="expert" label="–ë–æ–ª–æ–≤—Å—Ä—É—É–ª—Å–∞–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω">
              <Input />
            </Form.Item>
            <Form.Item
              name="lastModified"
              label="–•–∞–º–≥–∏–π–Ω —Å“Ø“Ø–ª–¥ ”©”©—Ä—á–ª”©–≥–¥—Å”©–Ω –æ–≥–Ω–æ–æ"
            >
              <DatePicker />
            </Form.Item>
            <Form.Item name="downloadLink" label="“Æ–∑“Ø“Ø–ª—ç–ª—Ç–∏–π–≥ —Ç–∞—Ç–∞—Ö —Ö–æ–ª–±–æ–æ—Å">
              <Input
                addonAfter={
                  <a href="#" target="_blank">
                    –õ–∏–Ω–∫
                  </a>
                }
              />
            </Form.Item>
          </Tabs.TabPane>

          <Tabs.TabPane tab="English" key="en">
            <Form.Item name="sectorEn" label="Sector">
              <Select mode="multiple" placeholder="Select sector" allowClear>
                {sectors.map((s) => (
                  <Select.Option key={s.id} value={s.nameen || s.namemn}>
                    {s.nameen || s.namemn}
                  </Select.Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item name="subSectorEn" label="Sub sector">
              <Input />
            </Form.Item>
            <Form.Item name="descriptionEn" label="Description">
              <TextArea rows={3} />
            </Form.Item>
            <Form.Item name="methodologyEn" label="Methodology">
              <TextArea rows={2} />
            </Form.Item>
            <Form.Item name="calculationEn" label="Calculation method">
              <TextArea rows={2} />
            </Form.Item>
            <Form.Item name="startDateEn" label="Start date">
              <DatePicker />
            </Form.Item>
            <Form.Item name="frequencyEn" label="Frequency">
              <Select mode="multiple" placeholder="Select frequency" allowClear>
                {frequencies.map((f) => (
                  <Select.Option key={f.id} value={f.nameen || f.namemn}>
                    {f.nameen || f.namemn}
                  </Select.Option>
                ))}
              </Select>
            </Form.Item>
            <Form.Item name="unitEn" label="Unit">
              <Input />
            </Form.Item>
            <Form.Item name="sourceEn" label="Source">
              <TextArea rows={2} />
            </Form.Item>
            <Form.Item name="languageEn" label="Language">
              <Select mode="tags" placeholder="ENG, MGL" />
            </Form.Item>
            <Form.Item name="expertEn" label="Expert">
              <Input />
            </Form.Item>
            <Form.Item name="lastModifiedEn" label="Last modified date">
              <DatePicker />
            </Form.Item>
            <Form.Item name="downloadLinkEn" label="Download link">
              <Input
                addonAfter={
                  <a href="#" target="_blank">
                    Link
                  </a>
                }
              />
            </Form.Item>
          </Tabs.TabPane>
        </Tabs>

        <div className="flex justify-end gap-2 mt-4">
          <Button onClick={() => window.history.back()}>–ë—É—Ü–∞—Ö</Button>
          <Button type="primary" htmlType="submit">
            –•–∞–¥–≥–∞–ª–∞—Ö
          </Button>
        </div>
      </Form>
    </div>
  );
}
